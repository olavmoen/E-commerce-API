{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "E-commerce API",
    "description": "An API for users to register/login and view different products.\n                    Registered users can add products to their cart and checkout to create \n                    their order. Registered users with admin role can add, edit and delete the products."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/init/": {
      "post": {
        "tags": [
          "Initialization"
        ],
        "description": "Initializes database and seed data",
        "responses": {
          "200": {
            "description": "Successfully initialized database",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Database successfully initialized"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get all products. Admins only",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of users",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Users found"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Update user by id. Admins only",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the user to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User fields to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "Updated username"
                },
                "firstname": {
                  "type": "string",
                  "example": "Updated firstname"
                },
                "lastname": {
                  "type": "string",
                  "example": "Updated lastname"
                },
                "email": {
                  "type": "string",
                  "example": "Updated email"
                },
                "address": {
                  "type": "string",
                  "example": "Updated address"
                },
                "phone": {
                  "type": "string",
                  "example": "Updated phone"
                },
                "role_id": {
                  "type": "string",
                  "example": "Updated role_id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "User updated"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Create new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User data",
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string",
                  "example": "Example firstname"
                },
                "lastname": {
                  "type": "string",
                  "example": "Example lastname"
                },
                "username": {
                  "type": "string",
                  "example": "Example username"
                },
                "email": {
                  "type": "string",
                  "example": "example@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "examplePassword"
                },
                "address": {
                  "type": "string",
                  "example": "Example address"
                },
                "phone": {
                  "type": "string",
                  "example": "12345678"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "New user registered"
                    },
                    "token": {
                      "type": "string",
                      "example": "Exmaple token"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Login user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Username/email and password",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "Example username"
                },
                "email": {
                  "type": "string",
                  "example": "example@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "examplePassword"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Successfully logged in"
                    },
                    "token": {
                      "type": "string",
                      "example": "Exmaple token"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "Provided invalid credentials",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        }
      }
    },
    "/auth/admin/access": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "Authenticate request from admin frontend",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated admin",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Admin access granted"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "description": "Get all categories",
        "responses": {
          "200": {
            "description": "Successfully fetched list of categories",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Categories found"
                    },
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "description": "Create new category",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Name of category to create",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Example name"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category created"
                    },
                    "brand": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/categories/{id}": {
      "delete": {
        "tags": [
          "Categories"
        ],
        "description": "Delete category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the category to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category deleted"
                    },
                    "brand": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "description": "Update category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the category to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Category fields to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category updated"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/brands/": {
      "get": {
        "tags": [
          "Brands"
        ],
        "description": "Get all brands",
        "responses": {
          "200": {
            "description": "Successfully fetched list of brands",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brands found"
                    },
                    "brands": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Brand"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "description": "Create new brand",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Brand name to create",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Example name"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Brand created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand created"
                    },
                    "brand": {
                      "$ref": "#/components/schemas/Brand"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/brands/{id}": {
      "delete": {
        "tags": [
          "Brands"
        ],
        "description": "Delete brand by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the brand to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand deleted"
                    },
                    "brand": {
                      "$ref": "#/components/schemas/Brand"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Brand not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Brands"
        ],
        "description": "Update brand by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the brand to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product fields to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand updated"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Brand"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Brand not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Get all products. Admins receive all products, while other users or guests get only available products.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of products (Only non-deleted products if not admin)",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "description": "Create a new product. Admins only.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Product data to create",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Example product"
                },
                "description": {
                  "type": "string",
                  "example": "Product description"
                },
                "unitprice": {
                  "type": "number",
                  "example": 499
                },
                "imgurl": {
                  "type": "string",
                  "example": "http://images.test.png"
                },
                "quantity": {
                  "type": "number",
                  "example": 50
                },
                "brand_id": {
                  "type": "number",
                  "example": 1
                },
                "category_id": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product created"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Get all product by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched product",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product found"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "description": "Update a product by ID. Admins only",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product fields to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated product name"
                },
                "description": {
                  "type": "string",
                  "example": "Updated description"
                },
                "unitprice": {
                  "type": "number",
                  "example": 999
                },
                "imgurl": {
                  "type": "string",
                  "example": "http://new.image.url.png"
                },
                "quantity": {
                  "type": "number",
                  "example": 100
                },
                "brand": {
                  "type": "string",
                  "example": "Updated brand"
                },
                "category": {
                  "type": "string",
                  "example": "Updated category"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product updated"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "description": "Delete a product by ID. Admins only",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product deleted"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cart/add": {
      "post": {
        "tags": [
          "Cart"
        ],
        "description": "Add product to cart. Must be registered user",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Id and amount of product to add",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "number",
                  "example": 1
                },
                "amount": {
                  "type": "number",
                  "example": 5
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product successfully added to cart",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product added to cart"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Not enough stock of product",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Not enough of product in stock"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cart/remove": {
      "post": {
        "tags": [
          "Cart"
        ],
        "description": "Remove product from cart. Must be registered user",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Id and amount of product to remove",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "number",
                  "example": 1
                },
                "amount": {
                  "type": "number",
                  "example": 5
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully removed from cart",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product removed from cart"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "404": {
            "description": "Product not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cart/checkout/now": {
      "post": {
        "tags": [
          "Cart"
        ],
        "description": "Checkout cart and create order. Must be registered user",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully checked out",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Checked out, order created"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Not enough stock of products in cart",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Not enough in stock of [product-name]"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "404": {
            "description": "No products in cart",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/search/": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Get list of products based on search parameters. All products if no arguments given",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Optional values to search and filter: Name of product, brand id and category id",
            "schema": {
              "type": "object",
              "properties": {
                "keyword": {
                  "type": "string",
                  "example": "Example name"
                },
                "brandId": {
                  "type": "number",
                  "example": 1
                },
                "categoryId": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of products.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/roles/": {
      "get": {
        "tags": [
          "Roles"
        ],
        "description": "Get all roles. Admins only",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of roles",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Roles found"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Get all users orders",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of orders",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orders found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/admin": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Get all orders. Admins only",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of orders",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orders found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "description": "Update status order by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the order to update",
            "example": 1
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Status of order to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "New status"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Status updated"
                    },
                    "product": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request — missing required fields.",
            "schema": {
              "$ref": "#components/schemas/MissingParameters"
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "404": {
            "description": "Order not found",
            "schema": {
              "$ref": "#components/schemas/ResourceNotFound"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/memberships/": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "description": "Get all memberships",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of memberships",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Memberships found"
                    },
                    "brands": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Membership"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User provided invalid token",
            "schema": {
              "$ref": "#components/schemas/FailedAuthentication"
            }
          },
          "403": {
            "description": "User is not admin",
            "schema": {
              "$ref": "#components/schemas/NotAdmin"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#components/schemas/ServerError"
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Example name"
          },
          "description": {
            "type": "string",
            "example": "Example description"
          },
          "unitprice": {
            "type": "integer",
            "example": 649
          },
          "imgurl": {
            "type": "string",
            "example": "http://images.test.png"
          },
          "quantity": {
            "type": "integer",
            "example": 10
          },
          "isDeleted": {
            "type": "boolean",
            "example": false
          },
          "brand_id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "brand": {
            "type": "string",
            "example": "Example brand"
          },
          "category": {
            "type": "string",
            "example": "Example category"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-02T09:25:53Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-02T09:25:53Z"
          }
        }
      },
      "Brand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Example name"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Example name"
          }
        }
      },
      "Membership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Example name"
          },
          "minValue": {
            "type": "integer",
            "example": 0
          },
          "maxValue": {
            "type": "integer",
            "example": 14
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "ordernumber": {
            "type": "string",
            "example": "djeivwhf4"
          },
          "status": {
            "type": "string",
            "example": "In progress"
          },
          "discount": {
            "type": "integer",
            "example": 0
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "membership_id": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-02T09:25:53Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-02T09:25:53Z"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Example name"
          }
        }
      },
      "User": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "firstname": {
          "type": "string",
          "example": "Example firstname"
        },
        "lastname": {
          "type": "string",
          "example": "Example lastname"
        },
        "username": {
          "type": "string",
          "example": "Example username"
        },
        "email": {
          "type": "string",
          "example": "example@gmail.com"
        },
        "address": {
          "type": "string",
          "example": "Example address"
        },
        "phone": {
          "type": "string",
          "example": "12345678"
        },
        "membership": {
          "type": "string",
          "example": "bronze"
        },
        "role": {
          "type": "string",
          "example": "User"
        }
      },
      "ServerError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "statusCode": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "FailedAuthentication": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "statusCode": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Invalid token"
          }
        }
      },
      "NotAdmin": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "statusCode": {
            "type": "integer",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "Must be admin to access"
          }
        }
      },
      "ResourceNotFound": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "statusCode": {
            "type": "integer",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "[resource] not found"
          }
        }
      },
      "MissingParameters": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "statusCode": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "All fields are required"
          }
        }
      },
      "ForeignKeyConstraint": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "statusCode": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid foreign key"
          }
        }
      }
    }
  }
}